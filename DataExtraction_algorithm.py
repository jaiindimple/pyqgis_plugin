# -*- coding: utf-8 -*-

"""
/***************************************************************************
 DataExtraction
                                 A QGIS plugin
 This plugin provides raster data statistics.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-11-29
        copyright            : (C) 2023 by DimpleJain
        email                : jain23dimple@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'DimpleJain'
__date__ = '2023-11-29'
__copyright__ = '(C) 2023 by DimpleJain'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterBand,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFileDestination,
                       QgsMessageLog,
                       QgsCoordinateReferenceSystem,
                       QgsRectangle,
                       QgsProcessingParameterExtent,
                       QgsProcessingParameterFeatureSink)

from qgis import processing
import ast
import tempfile
import uuid
import matplotlib
matplotlib.use('Agg')

from qgis.core import *
from qgis.gui import *
from qgis.PyQt.QtWidgets import *
from pathlib import Path

import glob
import os

from qgis.analysis import QgsNativeAlgorithms

import pandas as pd

import matplotlib.pyplot as plt

class DataExtractionAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFile(
                'INPUT',
                self.tr("Input folder"),
                behavior=QgsProcessingParameterFile.Folder,
                fileFilter="All files (*.tif*)"
            )
        )

        self.addParameter(
            QgsProcessingParameterExtent(
                name='MAP_EXTENT', description='Extent for Point Sampling')
        )

        float_input_param = QgsProcessingParameterNumber(
                'MIN_DIST',
                self.tr('Minimum Distance between point'),
                type=QgsProcessingParameterNumber.Double,
                minValue=0, maxValue=10, defaultValue=0.001
            )
        float_input_param.setMetadata( {'widget_wrapper':
            { 'decimals': 3 }
            })
            
        self.addParameter(
            float_input_param
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                'NUM_POINTS',
                self.tr('Number of points'),
                type=QgsProcessingParameterNumber.Integer,
                minValue=0, maxValue=99999, defaultValue=5
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFileDestination(
                'CSV OUTPUT',
                self.tr('Sampling_Output File (.csv)'),
                'CSV files (*.csv)',
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                'PNG OUTPUT',
                self.tr('Graph Output File (.png)'),
                'PNG files (*.png)',
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                'CSV STAT OUTPUT',
                self.tr('Statistics Output File (.csv)'),
                'CSV files (*.csv)',
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        outfolder = tempfile.mkdtemp()

        extent_crs = parameters['MAP_EXTENT'].split(' ')[1][1:-1]
        crs = QgsCoordinateReferenceSystem(extent_crs)
        randompoints = os.path.join(outfolder, str(uuid.uuid4())+'.geojson')
        parameter_ = {"EXTENT": parameters['MAP_EXTENT'], "POINTS_NUMBER": parameters['NUM_POINTS'], "MIN_DISTANCE": parameters['MIN_DIST'],
                      "TARGET_CRS": crs, "OUTPUT": randompoints}
        result_randompoints = processing.runAndLoadResults(
            'qgis:randompointsinextent', parameter_)
        feedback.setProgressText("Random points in extent: ")
        feedback.setProgressText(str(result_randompoints))
        feedback.setProgress(10)

        feedback.setProgressText("\n")

        rlist = []
        for rasters in glob.glob(f"{parameters['INPUT']}/*.tif"):
            rlist.append(rasters)
        extractpixels_csv = []
        for tile in rlist:
            output_filenm = os.path.join(
                outfolder, str(uuid.uuid4())+'.geojson')
            sampling_parameter = {"INPUT": result_randompoints["OUTPUT"], "RASTERCOPY": tile,
                                  "COLUMN_PREFIX": Path(tile).name, 'OUTPUT': output_filenm}
            sampling_result = processing.run('native:rastersampling', sampling_parameter)
            
            extractpixels_csv.append(sampling_result['OUTPUT'])
        feedback.setProgressText("Extract pixel data from raster: ")
        feedback.setProgressText(str(extractpixels_csv))
        feedback.setProgress(30)

        feedback.setProgressText("\n")

        outfile = extractpixels_csv[0]
        for csv_ in extractpixels_csv[1:]:
            temp_output = os.path.join(outfolder, str(uuid.uuid4())+'.geojson')
            alg_params = {
                'FIELD': 'id',
                'FIELDS_TO_COPY': None,
                'FIELD_2': 'id',
                'INPUT': csv_,
                'INPUT_2': outfile,
                'METHOD': 1,
                'PREFIX': '',
                'OUTPUT': temp_output
            }
            outfile = processing.run('native:joinattributestable', alg_params)["OUTPUT"]
        feedback.setProgressText("Merge datasets: ")
        feedback.setProgressText(str(extractpixels_csv))
        feedback.setProgress(60)

        feedback.setProgressText("\n")

        csv_output = os.path.join(outfolder, str(uuid.uuid4())+'.csv')
        csv_parameter = {"LAYERS": outfile, "USE_ALIAS": False,
                         "FORMATTED_VALUES": False, 'OVERWRITE': True, 'OUTPUT': csv_output}
        csv_result = processing.runAndLoadResults(
            'native:exporttospreadsheet', csv_parameter)
        feedback.setProgressText("Export to CSV: ")
        feedback.setProgressText(str(csv_result))
        feedback.setProgress(80)

        feedback.setProgressText("\n")

        png_output = os.path.join(outfolder, str(uuid.uuid4())+'.png')
        csv_df = pd.read_csv(csv_output, index_col=0, parse_dates=True)
        id_col_list = [col_id for col_id in csv_df.columns if "id_" in col_id]
        csv_df.drop(id_col_list, axis=1,inplace=True)
        fig = csv_df.plot().get_figure()
        fig.savefig(png_output)
        
        csv_df.plot(kind='line')

        # the plot gets saved to 'output.png'
        plt.savefig(png_output)
        feedback.setProgressText("Exported Graph for generated output")
        feedback.setProgress(90)

        feedback.setProgressText("\n")

        stats_output = os.path.join(outfolder, str(uuid.uuid4())+'.csv')
        csv_df.describe().to_csv(stats_output)
        feedback.setProgressText("Generated basic stats for the output")
        feedback.setProgress(100)

        return {self.OUTPUT: "Processing Complete"}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'DataExtraction'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Data Extraction for raster'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DataExtractionAlgorithm()
